const platformBodies = [];
const boundaryThickness = 100;
const platformOptions = { isStatic: true, friction: 0.5, frictionStatic: 0.8, restitution: 0 };
const platformHeight = 30;
const platformData = [ /* ... тот же platformData ... */ { x: worldWidth / 2, y: worldHeight + boundaryThickness / 2 - 10, width: worldWidth, height: boundaryThickness, angle: 0, label: 'platform-ground', visible: true }, { x: worldWidth / 2, y: -boundaryThickness / 2, width: worldWidth, height: boundaryThickness, angle: 0, label: 'platform-ceiling', visible: false }, { x: -boundaryThickness / 2, y: worldHeight / 2, width: boundaryThickness, height: worldHeight, angle: 0, label: 'wall-left', visible: false }, { x: worldWidth + boundaryThickness / 2, y: worldHeight / 2, width: boundaryThickness, height: worldHeight, angle: 0, label: 'wall-right', visible: false }, { x: p1StartX, y: worldHeight - 150, width: 250 * 2, height: platformHeight, angle: 0, label: 'platform-start-left' }, { x: p2StartX, y: worldHeight - 150, width: 250 * 2, height: platformHeight, angle: 0, label: 'platform-start-right' }, { x: worldWidth / 2, y: worldHeight - 300, width: 300 * 2, height: platformHeight, angle: 0, label: 'platform-low-center' }, { x: 350, y: worldHeight - 300, width: 200, height: platformHeight, angle: 0, label: 'platform-low-far-left' }, { x: worldWidth - 350, y: worldHeight - 300, width: 200, height: platformHeight, angle: 0, label: 'platform-low-far-right' }, { x: worldWidth / 2 - 300, y: worldHeight - 600, width: 250 * 2, height: platformHeight, angle: 0, label: 'platform-mid-center-left' }, { x: worldWidth / 2 + 300, y: worldHeight - 600, width: 250 * 2, height: platformHeight, angle: 0, label: 'platform-mid-center-right' }, { x: worldWidth / 2, y: worldHeight - 900, width: 300 * 2, height: platformHeight, angle: 0, label: 'platform-upper-mid-center' }, { x: 400, y: worldHeight - 1100, width: 150, height: platformHeight, angle: Math.PI / 20, label: 'platform-high-far-left' }, { x: worldWidth - 400, y: worldHeight - 1100, width: 150, height: platformHeight, angle: -Math.PI / 20, label: 'platform-high-far-right' }, { x: 1200, y: worldHeight - 1200, width: 180 * 2, height: platformHeight, angle: 0, label: 'platform-high-center-left' }, { x: worldWidth - 1200, y: worldHeight - 1200, width: 180 * 2, height: platformHeight, angle: 0, label: 'platform-high-center-right' }, { x: worldWidth / 2, y: worldHeight - 1500, width: 250, height: platformHeight, angle: 0, label: 'platform-top-center' }, { x: 800, y: worldHeight - 1600, width: 150 * 2, height: platformHeight, angle: 0, label: 'platform-top-left' }, { x: worldWidth - 800, y: worldHeight - 1600, width: 150 * 2, height: platformHeight, angle: 0, label: 'platform-top-right' } ];

function setupPlatforms() {
    platformData.forEach((data) => {
        const platformBody = Bodies.rectangle(data.x, data.y, data.width, data.height, { ...platformOptions, angle: data.angle, label: data.label });
        platformBody.renderData = { width: data.width, height: data.height, colorBase: colors.platformBase, colorTop: colors.platformEdge, visible: data.visible !== false };
        platformBodies.push(platformBody);
    });
    World.add(world, platformBodies);
}
